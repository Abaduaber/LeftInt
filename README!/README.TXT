19 декабря, 2011.
LInt 3.0.41. Краткий справочный файл.

Тут и далее:
LInt - собственно, данная программа.
Автор языка - Kakos_nonos (http://www.kabardcomp.narod.ru/)

Назначение:
LInt служит для выполнения программ, написанных на языке СТЕПЛЕР, версии 3.0,
автор которого - Kakos_nonos.
LInt понифицирован zxD)))

Информация о языке:
Базовая информация о языке (синтаксис, работа операторов) описана в файле
lang.txt, который составил автор языка. Язык является в некоторой мере
эзотерическим и использует стековую парадигму. Исходя из предоставляемого
стандартом функционала, можно сказать, что на данный момент язык является
ДОС-ориентированным.
Больше о языке можно узнать, ознакомившись с книгой, которую написал
создатель языка. Скачать ее можно с его сайта, по следующей ссылке:
http://kabardcomp.narod.ru/stbook.pdf
К сожалению, книга устарела в том плане, что описывает самую первую версию
языка, еще примерно в таком состоянии, в каком он был весной 2011 года.
На данный момент (1 декабря, 2011) последняя версия языка - 3.1.
Тем не менее, в книге подробно рассмотрены базовые алгоритмы и приемы
программирования, которые можно успешно применять и в третьей версии языка =).
Последние же тенденции, связанные с языком СТЕПЛЕР, на данный момент
обсуждаются в теме форума http://iforum.su:
http://iforum.su/stepler/proekt-novogo-yazyka-144.html
Также, автор языка занят написанием объемной книги по сему ЯП, детально
затрагивающей все нюансы работы с ним.

Плюшки LInt 3.0.41:
1. Относительно быстрая скорость исполнения программ.
2. Указывает на ошибки в программе, как во время компиляции, так и во время
   выполнения.
3. Возможность получить EXE файл программы. LInt не является компилятором
   в полном смысле этого слова (ну, или в том, который в него обычно
    вкладывают), а всего лишь исполняет байткод, предварительно вшитый
    в EXE-файл.
4. Сняты ограничения на длину программы. Вместе с тем, остаются некоторые
   другие ограничения:
  * Максимальное количество меток и подпрограмм ограничено 2048.
  * Максимальный размер генерируемого байткода ограничен 64Кб.
    В среднем, байткод выходит в 1,5-2 раза легче, чем текст программы,
    что позволяет компилировать программы размером до 80-100Кб.
  * Максимальный уровень вложенности для директивы Uses составляет 30.
    Тоесть, сделать uses файла, который делает uses файла, который делает
    Uses файла, который делает... можно до 30 раз.
5. Доступен исходный код, порой даже откомментированный =)
6. Программе, исполняемой под LInt доступно порядка 32000 переменных.
7. Присутствует экспериментальный транслятор из исходного кода на языке СТЕПЛЕР
   в ассемблерный листинг, рассчитанный на компиляцию с помощью беслатного
   ассемблера FASM.

Интерпретация:
Для того, чтобы запустить программу, достаточно запустить LInt и ввести путь
и имя файла с программой. Расширение файла, если оно есть, нужно также вводить.
Поддерживаются как относительные, так и абсолютные пути.
Также работает немедленный запуск программы из командной строки:
Команда "LInt prime.st" запустит интерпретатор, и тот сразу попытается открыть
файл prime.st, полагая, что он расположен в том же каталоге, в котором расположен
Lint.exe.
Если файл удалось открыть, начнется его компиляция, которая долго не продлится,
и, если в программе отсутствуют ошибки, начнется исполнение программы.

Генерация EXE:
Для того, чтобы получить EXE файл программы, достаточно ввести имя файла и
после него английский символ "C". Такой же синтаксис работает и при передаче
параметров через командную строку. Для успешной "компиляции" необходимо,
чтобы файл с именем "INT" находился в том же каталоге, что и исполняемый
файл интерпретатора.
В последствии, если сгенерированный EXE будет использовать работу с
графическим режимом SVGA "~(1)(1)", требуется чтобы в одной с ним директории
лежал файл SVGA256.BGI.
Главное отличие исполнения EXE файла от интерпретации исходного кода
программы состоит в том, что в EXE отсутствуют процедуры предобработки и
компиляции. Интерпретатору на исполнение сразу же подается готовый байткод,
который исполняется, а затем программа завершается, предварительно выждав
нажатия на любую клавишу. Соответственно, сгенерированному exe-файлу больше
не нужен исходный код программы, чтобы выполняться.
Файл - источник, "INT", специально обработан упаковщиком исполняемых файлов
LZEXE, чтобы посолиднее было =)

Трансляция:
Для того, чтобы получить ассемблерный листинг из программы на СТЕПЛЕРе, требуется
дать LInt команду в следующем формате:
<Имя файла с исходным кодом> <T> [число] [число]
Первые два параметра обязательны.
*. Первое число заставляет LInt зарезервировать
в ассемблерном листинге стек параметров, размером в указанное число значений.
Стек параметров служит для передачи и сохранения параметров в подпрограммы
с помощью команд "P" и "G". Стандартный размер (если число не указано) составляет
512 ячеек. Если программа реализует активную работу с параметрами, и при этом
использует рекурсивные вызовы подпрограмм, есть смысл увеличить объем стека.
*. Второе число заставляет LInt зарезервировать в ассемблерном листинге стек
локальных переменных размером в указанное число значений.
Стек локальных переменных, как ясно из самого названия, служит для сохранения
локальных переменных, объявляемых с помощью команды ?[<выражение>].
Стандартный размер (если число не указано) составляет 512 ячеек. Если программа
реализует активную работы с рекурсивными процедурами, в которых используются
локальные переменные, есть смысл увеличить это значение.
LINT FACT.ST T 4096 4096 заставит программу сгенерировать ассемблерный листинг
из файла FACT.ST, и выделить в нем по 4096 ячеек на стек параметров и стек
локальных переменных.
(!). Так как транслятор экспериментальный, то в нем существуют некоторые ограничения:
*. Основное ограничение связано с невозможностью трансляции некоторых команд вызова
расширенных функций языка: "~". Все остальное работает. Будьте внимательны, т.к транслятор
хоть и будет генерировать код для вызова каждой специальной функции, но специальные функции
под номерами 1,2,3,4,5,14,17,18,19,20 (вся работа с SVGA-графикой) просто не будут ничего делать.
Специальные функции под номерами 6,7,8,9,10,11,12,13,15,16 работают неплохо.
*. Еще один момент - в сгенерированных программах используется общая память в
пределах лишь 128Кбайт. Хранение всех стеков ведется в сегменте
кода. Из этого вытекает зависимость: максимальный размер кода скомпилированной
com-программы может составлять:
(65536 - (PSSize * 2) - (LSSize * 2) - 512 - SSSize).
Где PSSIze - размер стека параметров, LSSize - размер стека локальных переменных,
SSSize - ориентировочный размер системного стека.
Если программа использует стандартные настройки, и не слишком активно использует
локальные переменные и рекурсию, то размер com-файла без особых проблем может
достигать и 60-62Кб. Если же активно используется рекурсия и локальные переменные,
то следите, чтобы после окончания кода, и до конца сегмента осталовалось достаточно
место под стеки. Тут уж придется экспериментировать - все зависит от конкретной программы.
Переменные располагаются в отдельном сегменте, и их количество ограничено лишь
размером сегмента: нам доступно 32765 переменных.

По поводу самого листинга можно сказать так: Транслятор вставляет комментарии к блокам
кода, связанным определенным смыслом, а также ко всем используемым процедурам.
Это сделано специально, для облегчения читаемости ассемблерного листинга, и его правки
(например, оптимизация) в случае такой необходимости.
Пример:
	Исходная строка:
	$(2^180*^180/)(180^2*^180/)

	Выходной ASM-код:
	add di,2 ;^
	mov [di],word 2 ;push
	mov ax,180 ;push
	imul word [di] ;*
	mov [di],ax ;^
	mov ax,180 ;push
	xor dx,dx ;/
	mov bx,[di]
	xchg ax,bx
	idiv bx
	mov [Remem],ax ;rem
	mov di,RPSt+2 ;^ --> push
	mov [di],word 180
	mov ax,2 ;push
	imul word [di] ;*
	mov [di],ax ;^
	mov ax,180 ;push
	xor dx,dx ;/
	mov bx,[di]
	xchg ax,bx
	idiv bx
	sub di,2
	call SetVar ;A
	
Транслятор проводит оптимизацию транслированного кода, но сугубо минимальную - в основном
внимание обращается на то, чтобы не пораждать бессмысленных в данном конкретном случае
команд. В это определение не входит предвычисление констант - это работа скорее для компилятора,
и я планирую ей заняться в следующих версиях LInt.
Разумеется, на данный момент говорить даже о посредственной оптимизации кода не представляется
возможным, но дела обстоят лучше, чем в предыдущей версии LInt. Я буду и дальше работать над этим
критерием.

Еще один нюанс трансляции: Если программа, которая транслируется, вызывает хотя-бы одну из специальных
функций, в итоговый листинг будут включены подпрограммы, реализующие вообще все доступные специальные
функции. Это связано с тем, что СФ могут быть вызваны по выражению, поэтому приходится
пихать в листинг все. Если будет разработан оптимизатор, то можно будет позаботиться и о этой проблеме.
А на данный момент, если программа вызывает строго определенные функции, то коды всех неиспользуемых
функций можно безболезненно удалить из полученного листинга.
Тексты всех подпрограмм, которые используются транслятором, находятся в файле TD.DAT.
Основная логика же транслятора находится в файле SRC\LINTTRAN.PAS - там же и прописаны
подпрограммы разбора выражений и вывода байткода в ассемблерный листинг.

Что делать с листингом ASM?:
Как я уже упоминал, полученный ASM-файл может быть скомпилирован с помощью бесплатного
ассемблера FASM. Обратите внимание - транслироваться будет только в DOS-версии этого
ассемблера. Например, командой FASM PRIME.ASM мы получим файл PRIME.COM, который можно
будет запустить на исполнение. Примеры ASM-листингов, и сгенерированных COM файлов
находятся в директории TRANS.
Загрузить FASM можно с официального сайт разработчика:
http://flatassembler.net/download.php
Я намеренно не включал FASM в архив с LInt, даже не смотря на то,
что FASM является свободным и открытым ПО, и его лицензия позволяет делать так.
Он до сих пор поддерживается производителем, да и просто, подобный шаг мне кажется
несколько неправильным. Все таки, очень желательно, чтобы вы посетили именно официальный
сайт, на котором автор собрал не только свои ассемблеры для разных платформ, но и
замечательные мануалы, а также баннер с просьбой скинуть немного денежек за труды :P
В любом случае - скачать FASM - это дело пары минут, даже когда у вас Dial-Up)

Исходный код LInt:
Целиком и полностью в каталоге SRC. Откомментировано, главным образом, чтобы
не забыть, где и что в данный момент делается:

LUTILS.PAS - содержит полезные подпрограммы самого разного назначения.
LTIMER.PAS - подпрограммы для точной работы с таймером.
LMEM.PAS - библиотека, реализующая удобную работу с динамической памятью.
LINTPREP.PAS - препоцессор (обработка Define, Uses, выпил комментов и.т.п)
LINTEXE.PAS - именно этот файл использовался для генерации "INT".
              Затем было обработано LZExe.
LINTCONS.PAS - святая святых, это же общие для всей программы константы ;)
               Можно поправить, например, увеличить максимальное количество
               меток, вложенности uses, исправить тексты ошибок, и.т.п.
LINTCOMP.PAS - компилятор в байткод. Работает после препроцессора.
LINTBCIN.PAS - интерпретатор байткода. Работает после компилятора.
LINTTRAN.PAS - транслятор байткод > asm листинг. Работает после компилятора.
LINT.PAS - а эта штука просто объединяет все вышеперечисленное, и является
           оболочкой. Именно с нее нужно делать билд.
Все это дело компилировалось в Turbo Pascal 7.0. Вполне возможно, что неплохо
будет компилиться и в более ранних версиях, однако сие предположение
на истинность не проверялось.

Текущее состояние проекта:
Работа над программой не закончена, и будет продолжаться. Много чего еще не сделано
из того, что следует сделать. Буду рад любым замечаниям, критике, отзывам, советам и
предложениям, мне это действительно очень важно.
Если вдруг где то вами будет обнаружена ошибка, неточность, или еще какая
лажа (особенно, если LINT сам вам скажет назвать меня раздолбаем) то
сделайте это ;) Вместе с указанием программы, компилируя которую эта самая
ошибка и произошла, буду очень благодарен ;). Под ошибкой я подразумеваю
явно неадекватное поведение интерпретатора - вылет, зависание,
сообщение об ошибке в синтаксисе программы, когда вы уверены, что
она построена верно и.т.п.
Между тем, интерпретатор и компилятор версии LInt 3.0.41 достаточно хорошо
оттестирован, и не имеет критических проблем. Транслятор же находится в
стадии тестирования, и разумеется, я ничего не гарантирую. Если уже на то
пошло, я вообще ничего не гарантирую =). Но вроде транслирует, черт бы его
побрал ;)

Программы:
В каталоге Progs есть несколько программок, которые логично было бы выложить
вместе с интерпретатором.
1. BMP2.ST - вторая версия моего просмотрщика BMP. Образец BMP также есть,
   и его содержимое как бы намекает нам... =)
   Исправлено отображение BMP с длиной по X не делящейся на 4 без остатка.
2. PRIME.ST - программа поиска простых чисел. Автор - Kakos_nonos.
   С давних пор используется как бенчмарк, для замеров скорости
   интерпретации программ =)
3. FACT.ST - программа для рекурсивного нахождения факториала.
   Автор - Kakos_nonos.
4. MOUSE.ST - программа-пример, реализующая активную работу с прерываниями
   BIOS - работа с мышью и графическими режимами.
5. POERTY.ST - своеобразная игра с директивами define, может показаться
   забавным, но ничего особенного. На самом же деле - это обработанная
   программа FACT.ST =)
6. UTILS.SUF - библиотека, реализующая ввод строки с клавиатуры и вывод
   ее на экран. Все функции описаны в комментариях к исходному коду.
7. STCALC.ST - строковый калькулятор на СТЕПЛЕРЕ. Автор - Kakos_nonos.
8. HELLO.ST - Hello world, ну куда же без него? ;)
9. Поддиректория FlyG: содержит в себе игру, написанную на СТЕПЛЕРЕ, в
   виде аркадной космической леталки. В полную мощь использует директивы
   Define, Uses, а также все последние расширения версии языка СТЕПЛЕР 3.1.
   Успешно транслируется транслятором, исходный код включен, и откомментирован.


Директория TRANS:
Содержит в себе образцы сгенерированных транслятором LINT Asm листингов,
а также полученные после компиляции последних в FASM исполняемые файлы
формата COM.
Исходные программы на степлере, из которых производилась трансляция,
могут быть обнаружены в директории Progs.


Благодарность (ну да, дос, а что делать? zxD):
Ну, само собой, главная благодарность выражается автору языка, который
известен под никнеймом Kakos_nonos =). Все же, язык меня неслабо
заинтересовал в свое время, ибо он в своем роде уникален: Его нельзя
назвать в полной мере ни стековым, не эзотерическим, не процедурным,
хотя он и использует стековую парадигму, от него попахивает эзотерикой,
и в нем можно объявлять локальные переменные =). При этом, по своему
синтаксису он является адской смесью всего, что мне известно на данный
момент. Такой вот рецепт, ребята =)
Также большое спасибо всему населению форума www.iforum.su - таки каждый
из немногих приходил в тему, давал советы, критиковал - а это все ОЧЕНЬ
важно.


----Известные проблемы:----

  - LInt не обрабатывает файлы, имя которых длиннее 8 символов
    (без расширения). И это не баг, а такая фича файловой
    системы FAT16, (не путать с VFAT, которая применялась в Win95),
    на работу с которой рассчитана DOS, и, соответственно, подавляющее
    большинство написанных для нее программ, среди которых и LInt.
    Тут уж делать нечего ;).

Планы на будущее:
Ну дос, во как разогнался, zxD)))
Собственно говоря, планы довольно амбициозны:
 1. Довести до ума транслятор в ассемблер. Уже не так то много осталось ;)
    Хотя, как посмотреть =)
 2. Помимо трансляции в ASM, добавить возможность генерировать исполняемые файлы напрямую.
 3. А также запилить интерпретатор STAPLER под Windows. Ибо DOS, конечно, хорошо,
    но, увы, в наше время уже не котируется =).
 4. Еще стоит вопрос о создании IDE для всего этого дела.

Даже не знаю с чего начать =).

Вопросы, предложения, критика? Контакты ниже указаны, буду очень рад ;)

Автор:
Ну, Абадябер, дос шоле zxD)))
Сделано для www.iforum.su в период августа-ноября 2011 года =)

Контакты:
http://www.abaduaber.narod.ru
http://vk.com/abaduaber
Abaduaber@tut.by


  - История версий -
________________________________________
19 декабря, 2011
LInt 3.041
Исправления:
  - Исправлена работа оператора возведения в степень - &. Теперь он возводит вершину
    стека в степень подвершины, а не наоборот.
  - В Lang.txt добавлена информация по отсутствующей в списке команде возведения в
    степень - &

________________________________________
1 декабря, 2011
LInt 3.04
Исправления:
  - Исправлена неверная трансляция в ассемблерный код команды P, в случае принятия
    последней лишь одного операнда. Ошибка приводила к затиранию старого значения,
    лежащего на стеке параметров.
  - Исправлена неверная трансляция в ассемблерный код последовательности команд
    + и ^. Транслятор генерировал оптимизированный вариант для такой
    последовательности, но не опускал вершину стека в подвершину, что требовалось
    делать.
  - Исправлена проблема генерации транслятором некорректных листингов, возникающая
    в определенных программах, из за невключения в транслированный файл необходимых
    меток, констант и.т.п.
  - Генерируемый транслятором код оптимизируется намного лучше, как по размеру,
    так, надеюсь, и по скорости тоже =)
  - В транслированных программах символ $ в операторе вывода строки больше не
    прерывает вывод.
  - Теперь компилятор корректно обрабатывает символы табуляции, а именно, трактует
    их как обычные пробелы.
  - Из интерпретатора убран костыль, связанный с поддержкой возможности "дописывания"
    цифр к значению, лежащему на вершине стека. Например, если в предыдущих версиях
    LInt программа:
    $(3)(4)
    $(2)(3$5)
    выводила 45, то начиная с этой, в стек будет попадать лишь последнее указанное
    число, стало быть, будет выведено 5. Данное нововведение никак не сказывается
    на работе любых известных мне на данный момент программ.
  - Теперь LInt восстанавливает текстовой режим, после завершения программы,
    даже если он был изменен путем установки экранного режима через функции
    BIOS.
  - Теперь, даже если выполняемая программа устанавливает BIOS - совместимые графические
    режимы, посредством вызова прерываний BIOS, работают стандартные функции вывода
    языка. Тоесть, можно пользоваться первыми двумя переменными, выводить текст
    оператором вывода, и.т.п.

Добавления:
  - Несколько переработан транслятор. Теперь коды процедур вшиты не в сам транслятор,
    а расположены в отдельном файле TR.DAT. Это позволяет довольно удобно вносить
    исправления в генерируемый транслятором код процедур, не требуя при этом перекомпиляции
    всего проекта.
  - Теперь все переменные, используемые программой, сгенерированной транслятором,
    хранятся в отдельном сегменте, и, соответственно, общее количество доступных
    из транслированной программы переменных не зависит от размера исполняемого
    файла и любых стеков, и равно 32765 штук (нулевая нам не доступна, первые две
    служат для ввода\вывода чисел и символов).
    Стеки ОПЗ, параметров, и локальных переменных по прежнему живут в сегменте кода,
    поэтому следите за объемом полученных COM-файлов: после их кода в сегменте
    должно оставаться место на стеки, в том числе и на системный.
  - Добавлена трансляция следующих расширенных команд: 6,7,8,9,10,11,12,13,15,16.
    Команда 16 - очистка экрана - только для текстового режима, не больше 80*25.
  - Добавлена поддержка бинарных операторов ".", "\", ":", "#". (and, or, not, xor),
    как интерпретатором, так и транслятором.
  - Добавлена поддержка команды прямого доступа к памяти - "M", как интерпретатором,
    так и транслятором.
  - Добавлена поддержка нового поведения команды присвоения. Теперь команда последовательно
    присваивает все содержимое, начиная со дна стека, к его верхушке, нескольким переменным,
    начиная с указанной, и по порядку. Например, $(4)(54,60,76) присвоит переменной
    4 значение 54, переменной 5 значение 60, и переменной 6 значение 76.
    Эта особенность поддерживается как интерпретатором, так и транслятором.
  - Добавлена поддержка текстовых строк. При упоминании текстовой строки, вроде
    $(6)('God bless you',0) коды символов просто по порядку переносятся в стек,
    а затем работает команда присвоения. Поэтому в шестой переменной окажется
    код символа "G", в седьмой код символа "o" и.т.д. Данная фича работает как в
    интерпретаторе, так и в трансляторе.
    По прежнему отсутствует
    полноценная поддержка строковых операций, вроде выделения подстроки, конкатенации,
    сравнения и.т.п. Возможно, в будущем это будет реализовано в виде отдельной библиотеки,
    написанной на СТЕПЛЕРе.
  - Добавлена поддержка чисел в двоичных и шеснадцатеричных системах счисления.
    HEX-числа записываются так: ~H<HEX число>, например ~HF1.
    BIN-числа записываются так: ~B<BIN число>, например ~B11011
    Числа в HEX и BIN распознаются лишь внутри выражений. Это было сделано
    специально, чтобы не порождать конфликтов между директивами Define и 
    подобной записью чисел. Пример:
    Define H21='(1)'
    Program
    $(2)(~H21^~B1101+)
    ~H21(1) 
    Увидим на экране число 46, а затем будет установлен графический режим.
  - В файл Lang.txt добавлена информация по новым командам языка.
  - В директорию Progs добавлен файл GRAPH.SUF - маленькая библиотека для
    работы с графикой в режиме 320x200x256.
  - В директорию Progs добавлена поддиректория FlyG, в которой расположены
    исходные коды, ресурсы и исполняемый файл небольшой игры - аркады,
    написанной мной на СТЕПЛЕРЕ.
  - Возможно, новые ошибки =). Но, надеюсь, что нет zxD)))

________________________________________
13 ноября, 2011
LInt 3.03
Исправления:
  - Исправлена работа команды самомодификации, в частности ошибка при обработке
    символов-команд "0".."9"
  - Исправлена некритичная ошибка в компиляторе, из за которой любой безусловный
    переход генерировался как условный. Вообще, подобная ошибка в компиляторе
    являлась бы крайне критичной, если не бы специфика генерируемого LInt
    байткода: по такому, даже условному переходу, прыжок все равно происходил,
    в любом случае.
  - В Lang.txt добавлена информация по отсутствующей в списке команде генерации
    случайного числа.

Добавления:
  - Добавлен экспериментальный транслятор в ассемблер. На данный момент, транслятор
    генерирует ассемблерный листинг, совместимый с DOS-версией бесплатного компилятора
    FASM: http://flatassembler.net/download.php
    Ассемблерные листинги проверялись на DOS версии FASM v1.67.26, а также на
    последней на данный момент DOS версии FASM v1.69.35. Транслируются успешно =)
    Сама же DOS-версия FASM работает как минимум под Win3.1, запущенной в 32-бит
    расширенном режиме, т.к требует функции DPMI хоста. Я полагал, что FASM
    пользуется XMS, однако запускаться под голой DOS, с загруженными Himem.sys и
    EMM386.EXE он не пожелал.
  - Теперь файл LINT.EXE сжат с помощью упаковщика LZEXE.
  - В директорию PROGS добавлена библиотека UTILS.SUF, реализующая ввод строки
    с клавиатуры, и вывод ее на экран, а также считывание\запись текстовых строк
    из файлов. Процедуры для работы с файлами не будут корректно транслироваться
    в ASM текущей версией транслятора.
  - В директорию PROGS добавлена программа STCALC.ST. Реализует счет математического
    выражения, например "24-16*3". Автор - Kakos_nonos.
  - В директорию PROGS добавлена программа HELLO.ST. Для каноничности =)
  - Добавлена директория TRANS, в которой находятся образцы листингов для некоторых
    программ, а также сгенерированные FASM-ом по этим листингам исполняемые файлы COM.
  - Добавлен файл LICENSE.TXT. Да, да, теперь LInt обладает своеобразной лицензией =)

_______________________________________
15 Октября, 2011.
LInt 3.02
Исправления:
  - Убран отладочный в LInt 3.01 вывод свободного количества динамической памяти.
  - Убрана утечка памяти при обработке препроцессором определенным образом
    расположенной Uses-директивы.
  - Убрана регистро-зависимость при обработке препроцессором определений Define.
  - Ввиду практической бессмысленности убрана библиотека LCRT.PAS.
    Интерпретатор запрашивает ввод лишь для имени файла, и чисел,
    что делает полезность LCRT.PAS весьма сомнительной.
  - Изменен порядок обработки выражений для операторов присваивания
    и вызова специальной функции. Теперь, первым исполняется выражение слева,
    а лишь затем правое, как и требует стандарт языка. (!!!)

Добавления:
  - Добавлен резидентный русификатор дисплея и клавиатуры - RKS. Теперь, при запуске
    файла LInt.bat русификатор автоматически загрузится до интерпретатора,
    обеспечив, тем самым, нормальную работу с кириллицей.
    Чтобы генерируемые LInt EXE файлы могли выводить кириллицу, необходимо
    таскать вместе с EXE русификатор, и вызывать EXE таким же образом, как
    вызывается интерпретатор.
    ! - RKS является разработкой A.A.Mazein, я не имею к этой программе никакого
    отношения.
  - Пасхалка =)
  - Progs\Poerty.st. Небольшой пример активного использования директив Define =)
  - Возможно, новые ошибки =). Но, надеюсь, что нет zxD)))

_______________________________________
9 Октября, 2011.
LInt 3.01.
Исправления:

  - Исправлено неверное выделение памяти для стека возврата,
    переполнение которого приводило к утечке памяти.
  - Исправлена утечка памяти при инициализации графического режима.
    Там жирная такая была, да ;)
  - Проведены некритичные оптимизации кода.
  - Теперь LInt проверяет наличие доступной памяти перед инициализацией
    каждого отдельного модуля.
  - Из препроцессора и компилятора выпилено все ООП, в котором, по сути,
    не было никакой нужды.
  - Исправлена работа с файлами, находящимися во вложенных директориях
    по отношению к интерпретатору. Теперь хорошо работают любые
    относительные пути.
  - (!!!) Исправлено раздолбайство с подставой, когда после обнаружения
    препроцессором ошибки, интерпретатор удалял файл с программой на
    СТЕПЛЕРЕ, в котором была обнаружена ошибка, вместо удаления временного
    файла. Прошу прощения у всех, кто мог пострадать от этого моего
    раздолбайства. (Хотя, учитывая общую популярность языка на данный
    момент, шансы, что кто-то лишился своих исходников на СТЕПЛЕРЕ,
    крайне невелики =)
  - (!!!) Полностью обновлен препроцессор. Новая версия не имеет больше
    маразма старой - все uses обрабатываются в одном временном файле,
    в то время как в старой версии на каждый uses отводилось по отдельному
    временному файлу. От этого также увеличена скорость обработки программ
    с директивами Uses. Особенно это заметно на машинах со очень
    старыми моделями жестких дисков.
  - Исправлен вылет компилятора при переполнении буфера байткода.
  - Несколько других мелких доработок =)

Дополнения:

  1. Теперь отсутствуют явные ограничения на количество директив Define для
     отдельного файла - учитывается лишь общее количество директив для
     всего проекта - поддерживается столько, на сколько хватает памяти.
  2. Добавил модуль GRAPH256.TPU, необходимый для билда текущей версии
     LInt. Файл GRAPH.TPU, ввиду его присутствия в стандартной поставке
     Turbo Pascal, не добавлял.
  3. Файл lang.txt переведен в кодировку CP866, исправлен там, где это
     было необходимо.
  4. Возможно, новые ошибки =). Но, надеюсь, что нет zxD)))