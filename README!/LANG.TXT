Язык программирования степлер. Версия 3.0
Описание языка.

1.Структура программы.

	<Раздел define>
	<Раздел uses>
	<Подпрограммы>
	Program
	<Программа>


1.1 Раздел define

	define <иденитификатор> = '<Замена>'
	define <иденитификатор> = '<Замена>'
	define <иденитификатор> = '<Замена>'
	...

	Эта команда заменяет один текст в программе на другой. 
	Она действует только на тот текст, который находится после команды define.

	Команду define можно писать в любом месте программы

	Идентифмкатор должен начинатся с латинской буквы.

	Пример: define initgraph = '~(1)(1)'

1.2 Раздел uses

	uses '<имя>'
	uses '<имя>'
	uses '<имя>'
	...


	<имя> = <имя_файла>.suf (Stepler Uses File)

	Эта команда вставляет содержимое другого файла в основную программу в то место, где 	находится uses.
	
	uses можно писать в любрм месте программы.

	Пример: uses 'sound.suf'

1.2.1 Структура .suf файла

	<Раздел define>
	<Раздел uses>
	<Подпрограммы>

1.3 Подпрограммы

	={<имя подпрограммы>}=

	<Объявление локальных переменных>

	<Подпрограмма>

	**

	
	Имя подпрограммы не регистрозависимо, тоесть ={Proc}= и ={pRoC}= это одно и тоже.
	Также можно называть процедуры русскими именами.


1.3.1 Объявление локальных переменных

	?[<номер переменной>,<номер переменной>,<номер переменной>, ...]

	Здесь указываются номера переменных, которые будут использоваться на нужды подпрограммы.
	Подпрограмма может меять значения этих переменных, но основная программа этого не заметит, после выполнения подпрограммы эти переменные будут иметь теже значения, что и до подпрограммы.

Пример: ?[5,3,7,3]

1.4 Программа 

	рограмма начинается после слова Program.
	Состоит из списка команд, где на одной строке может быть только одна команда.

	<команда>
	<команда>
	<команда>
	<команда>
	...

2 Команды

	В степлере есть несколько основных команд:

	Команда присваиваия
	$(<выражение>)(<выражение>)

	Команда перехода на метку
	#(<выражение>)< <метка> >

	Команда вывода строки
	[<строка>]

	Команда вызова подпрограммы
	*(<выражение>)[<параметр>,<параметр>,<параметр>, ...]< <имя_подпрограммы> >

	Команда вызова специальной функции
	~(<выражение>)(<параметр>,<параметр>,<параметр>, ...)

	Команда записи в стек параметров
	P(<выражение>)

	Команда прямого доступа к памяти:
	M(<сегмент приёмника>, <смещение приёмника>, <сегмент источника>, <смещение источника>, <кол-во байт>)

	Коммаенарий до конца строки 
	;<комментарий>


2.1 Команда присваивания

	Команда имеет такой синтаксис:

	$(<выражение>)(<выражение>)

	Выражение в первых скобках означает номер переменной, в которую записывать число, а вторая - что записывать.

	Пример: $(5)(7) - Записать в пятую ячейку число семь.

	Если после выполнения выражения - источника (которое справа) в стеке ОПЗ остается больше одного значения,
	то все значения последовательно, начиная с самого дна стека, будут записаны в переменные, начиная с указанной
	в левом выражении, и по порядку.

	Пример: $(5)(7^18^29) - Записать в переменную 5 число 7, в переменную 6 - число 18, и в переменную 7 - число 29.

2.1.1 Переменные

	степлере для хранения данных используются пронумерованные переменные. Все они имеют тип знаковое 16-битное целое.
	Первые две зарезервированы для ввода/вывода. 
	Первыая - для символьного ввода/вывода. 
	Вторая - для численного.

2.3 Команда перехода на метку

	Есть два типа перехода на метку - условный и безусловный.

	Безусловный:

	#< <метка> >

	Условный:

	#(<выражение>)< <метка> >

	В условном переходе переход происходит только тогда, когда выражение в скобках равно нулю.

	Метка определяется так: {<метка>}

	Имена меток не регистрозависимы, и могут состоять из русских и английских букв.

	Пример: #(0)<label>


2.4 Вывод строки

	Выводится тот текст, который находится в квадратный скобках.

	[<Выводимый текст>]

2.5 Команда вызова подпрограммы

	Есть 4 типа вызова подпрограммы

	Безусловный вызов без передачи параметров
	*< <метка> >

	Условный вызов без передачи параметров
	*(<выражение>)< <метка> >

	Безусловный вызов с передачей параметров
	*[<параметр>,<параметр>,<параметр>, ...]< <метка> >

	Условный вызов с передачей параметров
	*(<выражение>)[<параметр>,<параметр>,<параметр>, ...]< <метка> >

	В условном вызове вызов происходит только тогда, когда выражение равно нулю.

	Параметры, передающиеся процедуре заносятся в стек параметров в направлении слево-направо.

	Пример: *(0)[3,6,2,12]<proc>


2.6 Команда вызова специальнях функций

	Эта команда имеет слудующий формат:
	~(<выражение>)(<параметр>,<параметр>,<параметр>, ...)

	В первой скобке идёт номер функции. Во второй идут параметры.

	Есть 20 функций:

	~(1)(режим) - изменить графический режим. Есть 2 режима: 

	0-текстовой
	1 - 640*480*256

	~(2)(X,Y,цвет) - рисовать точку в указанном месте с указанным цветом

	~(3)(X,Y,X1,Y1,цвет) - рисовать линию

	~(4)(X,Y,R,цвет) - рисовать круг

	~(5)(X,Y,н.п) - получить цвет пикселя. Этот цвет записывается в ячейку н.п 

	~(6)(частота) - играть звук с частотой "частота".

	~(7)(номер порта,значение) - отправить "значение" в порт "номер порта"

	~(8)(номер порта,номер переменной) - прочитать значение из порта "номер порта" и отправить значение в переменную "номер переменной"

	~(9)(номер прерывания,смещение переменной) - выполнить прерывание МС-ДОС. Выполняется прерывание "номер прерывания". Регистры, которые используются находятся со смещением "смещение переменной". Регистры расположены в таком порядке: ah,al,bh,bl,ch,cl,dh,dl,es,ds,si,di,bp. Тоесть,если смещение указано в 6, то ah будет в шестой переменной, al в седьмой, и. т. д.

	~(10)(смещение к имени файла,номер файла,подфункция) - открыть фаил. Открывается фаил, название которого находится в памяти со смещением "смещение к имени файла". Имя файла должно заканчиватся нулевым символом.

	Подфункция 0 - открыть для чтения.
	Подфункция 1 - для записи.
	Подфункция 2 - Переместится в файле в позицию смещение.

	~(11)(Номер файла,байт) - Записать байт в фаил "номер файла".

	~(12)(Номер файла,байт,конец) - прочитать байт из файла. Если фаил кончился, то переменная "конец" примет значение в 0, иначе в 1.

	~(13)(Номер Файла) - Закрыть фаил.

	~(14)(номер цвета,р,г,б) - уствновить цвет "номер цвета" в р.г.б

	~(15)(пауза) - пауза в сотых долях секунды.

	~(16)(0) - очистить экран

	~(17)(X,Y,C,G) - заливка. X,Y - точка заливки, C - цвет, G - цвет границы.

	~(18)(цвет,размер,X,Y,смещение к началу текста) вывод текста в графическом режиме. Конец строки обозначается нулевым символом.

	~(19)(цвет,размер,X,Y,число) - вывести на экран число.

	~(20)(цвет,размер,X,Y,код символа) вывод символа на экран.


	Пример: ~(3)(4,2,64,22,15)

2.7 Команда записи в стек параметров

	P(<выражение>,<выражение>,<выражение>, ...)

	Эта команда записывает данные в стек параметров.

2.8 Комментарии

	Комментарий до конца строки: ;<комментарий>

3 Запись выражений

	В степлере для записи выражений используется обратная польская нотация.

	<выражение> = <оператор><оператор><оператор>...<оператор>
	
3.1 Операторы

	Все рператоры берут значения из стека, и возвращая результат туда же.
	Операторы удаляют из стека те данные, которые берут.

	0-9 - дописать число к значению на вершине стека
	+ - сложить вершину и подвершину
	- - отнять от подвершины вершину
	* - умножить вершину на подвершину
	/ - делить вершину на подвершину
	% - получить остаток от деления вершины на подвершины
	^ - сдвинуть все значения стека на одив вверх
	! - получить знак числа. >0 => 1; <0 => -1; 0 =>0
	| - отрицание на 0. 0 => 1; <>0 =>0
	@ - получить квадратный корень.
	$ - получить значение переменной, которое на вершине стека
	? - получить случайное число, с диапазоном от 0, до значение на вершине стека - 1.
	& - возвести число, лежащее на вершине стека в степень подвершины.
	G - получить число из стека параметров
	P - загрузить число в стек параметров
	" - из вершины стека загружается код символа, а потом выполняется оператор, соответствующий этому символу.
	. - выполняет операцию побитового "и", над вершиной, и подвершиной стека.
	\ - выполняет операцию побитового "или", над вершиной, и подвершиной стека.
	: - выполняет операцию побитового "не" над вершиной стека.
	# - выполняет операцию побитового "XOR" над вершиной и подвершиной стека.
	S - ложит на вершину стека значение сегмента, в котором хранятся переменные.
	~H - своеобразный двухсимвольный оператор-директива, заставляет интерпретатор трактовать следующую
		за этим оператором совокупность символов как шеснадцатеричное число. При этом, работает
		следующее правило: эта директива работает лишь внутри выражений (все, что в скобках).
		А компилятор "съедает" все символы, которые корректны для HEX системы
		счисления, после чего ложит значение полученного числа на вершину стека.
		Проверка на переполнение при этом не ведется. Пример:
		$(2)(~H20^~HAA+) - выведет 202.
		В случае, если очевидно, что подобная запись числа приведет к конфликту и неоднозначностям,
		следует отделять подобную запись числа от остальных операторов пробелом.
		Define FF = '^2+'
		$(2)(~H20FF) - выведет 8447.
		$(2)(~H20 FF) - выведет 34.
	~B - тоже самое, но подразумевается, что указано двоичное число:
		$(2)(~B1111011^1+) - выведет 124.
	'Текст' - специальный "оператор", которые по порядку заносит коды указанных символов в стек, так,
		что в конце на вершине стека находится код последнего указанного символа:
		$(6)('God bless you'^0) - в шестой переменной будет расположен код символа G, в седьмой - 
		код символа o, и.т.п.

Пример: 4$^5^4$%$+G^-

3.2 Команда прямого доступа к памяти
	
	M(<сегмент приёмника>, <смещение приёмника>, <сегмент источника>, <смещение источника>, <кол-во байт>)

	Копирует <кол-во байт>, расположенных по адресу <сегмент источника>:<смещение источника> в область памяти,
	адресующуюся как <сегмент приёмника>:<смещение приёмника>.

	Если в качестве значение сегмента источника\приемника указан сегмент S (сегмент, в котором находятся переменные),
	то подразумевается, что первая переменная адресуется по смещению в 2, вторая - по смещению в 4, третья - по
	смещению в 6, и.т.п. Смещение 0 зарезервировано, и вести в него запись не рекомендуется.

	Пример: M(S, 12, ~H40, ~H6C, 4) - скопирует в шестую и седьмую переменную показания системных часов, в частности
	количество тиков таймера, прошедших с полуночи.